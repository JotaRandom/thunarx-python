/*-
 * Copyright (c) 2009 Adam Plumb <adamplumb@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

%%
headers
#define NO_IMOPRT_PYGOBJECT
#include "pygobject.h"

#include <thunarx/thunarx.h>

GHashTable *
_pyobject_to_ghashtable (PyObject   *py_dict, 
                         GHashTable *hashtable)
{
    Py_ssize_t pos = 0;
    PyObject *py_key, *py_value;
    
    g_return_val_if_fail (py_dict != NULL, NULL);

    while (PyDict_Next (py_dict, &pos, &py_key, &py_value))
    {
        if (PyString_Check (py_key) < 0)
        {
            PyErr_SetString (PyExc_TypeError, "key must be a string");
            continue;
        }
        if (PyString_Check (py_value) < 0)
        {
            PyErr_SetString (PyExc_TypeError, "value must be a string");
            continue;
        }
        
        g_hash_table_replace (hashtable, g_strdup (PyString_AsString (py_key)), g_strdup (PyString_AsString (py_value)));
    }
    
    return hashtable;
}

static PyObject*
_ghashtable_to_pyobject (GHashTable *hashtable)
{
    GList *keys;
    PyObject *dict;
    gpointer *value;

    dict = PyDict_New ();

    keys = g_hash_table_get_keys (hashtable);
    for (; keys; keys = g_list_next (keys))
    {        
        value = g_hash_table_lookup (hashtable, keys->data);
        if (value)
        {
            PyDict_SetItemString (dict, g_strdup ((char*)keys->data), PyString_FromString ((char *)value));
        }
        else
        { 
            PyErr_Warn (PyExc_RuntimeWarning, "hashtable contains a null value");
        }
    }
    g_list_free (keys);

    return dict;
}

%%
modulename thunarx
%%
import gobject.GObject as PyGObject_Type
import gtk.Bin as PyGtkBin_Type
import gtk.VBox as PyGtkVBox_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Window as PyGtkWindow_Type
import gtk.Action as PyGtkAction_Type
%%
ignore-glob
  *_get_type
%%
override ThunarxRenamer__proxy_do_get_actions noargs
static GList*
_wrap_ThunarxRenamer__proxy_do_get_actions(ThunarxRenamer   *self, 
                                           GtkWindow        *window, 
                                           GList            *files)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_window;
    PyObject *py_files;
    GList *retval = NULL;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return NULL;
    }
    
    if (window)
    {
        py_window = pygobject_new((GObject *) window);
    }
    else
    {
        Py_INCREF(Py_None);
        py_window = Py_None;
    }

    GList *l;
    py_files = PyList_New(0);
    for (l = files; l; l = l->next)
    {
        PyObject *obj = pygobject_new((GObject*)l->data);
	    PyList_Append(py_files, obj);
	    Py_DECREF(obj);
    }
    
    py_args = PyTuple_New(2);
    PyTuple_SET_ITEM(py_args, 0, py_window);
    PyTuple_SET_ITEM(py_args, 1, py_files);
    
    py_method = PyObject_GetAttrString(py_self, "do_get_actions");
    if (!py_method)
    {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return NULL;
    }
    
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval)
    {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_XDECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return NULL;
    }

    Py_ssize_t i = 0;
    if (!PySequence_Check(py_retval) || PyString_Check(py_retval))
    {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_XDECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return NULL;
    }
    
    for (i = 0; i < PySequence_Size (py_retval); i++) {
	    PyGObject *py_item;
	    py_item = (PyGObject*)PySequence_GetItem (py_retval, i);
	    if (!pygobject_check(py_item, &PyGtkAction_Type))
	    {
            if (PyErr_Occurred())
                PyErr_Print();
            Py_XDECREF(py_retval);
            Py_DECREF(py_method);
            Py_DECREF(py_args);
            Py_DECREF(py_self);
            pyg_gil_state_release(__py_state);
            return NULL;
	    }
	    
	    retval = g_list_append (retval, g_object_ref(py_item->obj));
        Py_DECREF(py_item);
    }
    
    Py_XDECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
    
    return retval;
}
%%
override ThunarxRenamer__proxy_do_load noargs
static void
_wrap_ThunarxRenamer__proxy_do_load(ThunarxRenamer  *self, 
                                    GHashTable      *settings)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_settings;
    PyObject *py_args;
    PyObject *py_method;

    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) 
    {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return;
    }

    py_settings = _ghashtable_to_pyobject(settings);

    py_args = PyTuple_New(1);
    PyTuple_SET_ITEM(py_args, 0, py_settings);
 
    py_method = PyObject_GetAttrString(py_self, "do_load");
    if (!py_method)
    {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
 
    PyObject_CallObject(py_method, py_args);
  
    Py_DECREF(py_settings);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
}
%%
override ThunarxRenamer__proxy_do_save noargs
static void
_wrap_ThunarxRenamer__proxy_do_save(ThunarxRenamer  *self, 
                                    GHashTable      *settings)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_settings;
    PyObject *py_args;
    PyObject *py_method;
    PyObject *py_ret;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) 
    {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return;
    }

    py_settings = _ghashtable_to_pyobject(settings);

    py_args = PyTuple_New(1);
    PyTuple_SET_ITEM(py_args, 0, py_settings);
    
    py_method = PyObject_GetAttrString(py_self, "do_save");
    if (!py_method)
    {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_settings);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }

    py_ret = PyObject_CallObject(py_method, py_args);
    if (!py_ret)
    {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_settings);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    settings = _pyobject_to_ghashtable(py_ret, settings);
    
    Py_DECREF(py_ret);
    Py_DECREF(py_method);
    Py_DECREF(py_settings);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
}
%%
define ThunarxFileInfo.get_file_info
static PyObject *
_wrap_thunarx_file_info_get_file_info(PyGObject *self)
{
#if THUNARX_API_VERSION >= 2
    GFileInfo *ret;
    
    ret = thunarx_file_info_get_file_info(THUNARX_FILE_INFO(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
#else
    g_warning("thunarx_file_info.get_file_info is not implemented for your version of Thunar");

    Py_DECREF(Py_None);
    return Py_None;
#endif
}
%%
define ThunarxFileInfo.get_filesystem_info
static PyObject *
_wrap_thunarx_file_info_get_filesystem_info(PyGObject *self)
{
#if THUNARX_API_VERSION >= 2
    GFileInfo *ret;
    
    ret = thunarx_file_info_get_filesystem_info(THUNARX_FILE_INFO(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
#else
    g_warning("thunarx_file_info.get_filesystem_info is not implemented for your version of Thunar");
        
    Py_DECREF(Py_None);
    return Py_None;
#endif
}
%%
define ThunarxFileInfo.get_location
static PyObject *
_wrap_thunarx_file_info_get_location(PyGObject *self)
{
#if THUNARX_API_VERSION >= 2
    GFile *ret;
    
    ret = thunarx_file_info_get_location(THUNARX_FILE_INFO(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
#else
    g_warning("thunarx_file_info.get_location is not implemented for your version of Thunar");

    Py_DECREF(Py_None);
    return Py_None;
#endif
}
%%
define ThunarxFileInfo.get_vfs_info
static PyObject *
_wrap_thunarx_file_info_get_vfs_info(PyGObject *self)
{
    g_warning("thunarx_file_info.get_vfs_info is not implemented for your version of Thunar");

    Py_DECREF(Py_None);
    return Py_None;
}
%%
override thunarx_property_page_new
static int
_wrap_thunarx_property_page_new(PyGObject *self, PyObject *args)
{
    PyGObject *arg;
    char *label;
    GtkWidget *label_widget;

    if (!PyArg_ParseTuple(args,"O:ThunarxPropertyPage.__init__", &arg))
        return -1;

    if (PyObject_TypeCheck(arg, &PyString_Type))
    {
        label = PyString_AsString((PyObject *)arg);
        Py_DECREF(arg);
        self->obj = (GObject *)thunarx_property_page_new(label);
    }
    else if (PyObject_TypeCheck(arg, &PyGtkWidget_Type))
    {
        label_widget = GTK_WIDGET(arg->obj);
        Py_DECREF(arg);
        self->obj = (GObject *)thunarx_property_page_new_with_label_widget(label_widget);
    }

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create ThunarxPropertyPage object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}
